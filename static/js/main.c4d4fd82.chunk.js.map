{"version":3,"sources":["Chart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["backgroundColours","foregroundColours","Chart","name","comment","scores","labels","canvasRef","useRef","useEffect","current","c","setAttribute","toString","ctx","getContext","images","document","getElementById","getElementsByTagName","innerRadius","radii","iconSize","colours","bgLines","colourLight","colourMedium","arcLength","Math","PI","length","translate","width","height","forEach","s","i","r","beginPath","globalAlpha","arc","fillStyle","fill","image","drawImage","cos","sin","x","y","angle","text","top","oldTransform","getTransform","offsetAngle","measureText","rotate","textAlign","split","letter","font","fillText","resetTransform","setTransform","textOnArc","strokeStyle","moveTo","lineTo","stroke","className","ref","App","useState","students","setStudents","onDrop","useCallback","acceptedFiles","reader","FileReader","onload","e","result","target","rawData","Uint8Array","workbook","XLSX","read","type","cellHTML","sheet","Sheets","SheetNames","data","utils","sheet_to_json","console","log","map","student","Name","Comment","label","readAsArrayBuffer","print","window","useDropzone","multiple","getRootProps","getInputProps","isDragActive","onClick","props","href","process","src","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c4d4fd82.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nexport type ChartData = {\r\n  name: string;\r\n  comment: string;\r\n  scores: Array<number>;\r\n};\r\n\r\nexport type ChartProps = ChartData & {\r\n  labels: string[];\r\n};\r\n\r\nconst textOnArc = (\r\n  ctx: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  r: number,\r\n  angle: number,\r\n  text: string\r\n) => {\r\n  const top = angle > Math.PI / 2 && angle < (3 * Math.PI) / 2;\r\n  const oldTransform = ctx.getTransform();\r\n  const offsetAngle = ctx.measureText(text).width / r / 2;\r\n  if (top) {\r\n    ctx.rotate(angle - Math.PI - offsetAngle);\r\n  } else {\r\n    ctx.rotate(angle + offsetAngle);\r\n  }\r\n  ctx.translate(x, y);\r\n  ctx.textAlign = \"start\";\r\n\r\n  text.split(\"\").forEach((letter) => {\r\n    ctx.font = \"20px Lato\";\r\n    const { width } = ctx.measureText(letter);\r\n    ctx.fillText(letter, 0, top ? -r + 10 : r + 3);\r\n    ctx.rotate(top ? width / r : -width / r);\r\n  });\r\n\r\n  ctx.resetTransform();\r\n  ctx.setTransform(oldTransform);\r\n};\r\n\r\nconst backgroundColours = [\r\n  \"#f7e8e6\",\r\n  \"#e2f3f6\",\r\n  \"#f1e9ef\",\r\n  \"#e2ecf7\",\r\n  \"#ebeaf2\",\r\n  \"#f5f7f9\",\r\n];\r\n\r\nconst foregroundColours = [\r\n  \"#c12a43\",\r\n  \"#3eb9ca\",\r\n  \"#8e437c\",\r\n  \"#0065b7\",\r\n  \"#544a95\",\r\n  \"#074070\",\r\n];\r\n\r\nconst textColour = \"#003683\";\r\n\r\nexport const Chart = ({ name, comment, scores, labels }: ChartProps) => {\r\n  const canvasRef = useRef<null | HTMLCanvasElement>(null);\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const c = canvasRef.current;\r\n      const width = 1000;\r\n      const height = 650;\r\n      c.setAttribute(\"width\", width.toString());\r\n      c.setAttribute(\"height\", height.toString());\r\n      const ctx = c.getContext(\"2d\");\r\n\r\n      const images = document\r\n        .getElementById(\"image-reference\")\r\n        ?.getElementsByTagName(\"img\");\r\n\r\n      if (ctx) {\r\n        const innerRadius = 80;\r\n        const iconRadius = 190;\r\n        const outerRadius = 300;\r\n        const radii = [120, 160, 200, 240, 280];\r\n        const iconSize = 130;\r\n\r\n        const colours = {\r\n          bgLines: \"#000\",\r\n          colourLight: \"#98edb9\",\r\n          colourMedium: \"#53b579\",\r\n        };\r\n\r\n        const lineAlpha = 0.3;\r\n\r\n        const arcLength = (2 * Math.PI) / scores.length;\r\n\r\n        ctx.translate(width / 2, height / 2);\r\n\r\n        scores.forEach((s, i) => {\r\n          const r = radii[s - 1];\r\n\r\n          ctx.beginPath();\r\n          ctx.globalAlpha = 1;\r\n          ctx.arc(0, 0, innerRadius, arcLength * (i + 1), arcLength * i, true);\r\n          ctx.arc(0, 0, radii[4], arcLength * i, arcLength * (i + 1));\r\n          ctx.fillStyle = backgroundColours[i];\r\n          ctx.fill();\r\n\r\n          const image = images?.[i];\r\n\r\n          ctx.beginPath();\r\n          ctx.globalAlpha = 0.6;\r\n          ctx.arc(0, 0, innerRadius, arcLength * (i + 1), arcLength * i, true);\r\n          ctx.arc(0, 0, r, arcLength * i, arcLength * (i + 1));\r\n          ctx.fillStyle = foregroundColours[i];\r\n          ctx.fill();\r\n\r\n          if (image) {\r\n            ctx.globalAlpha = 0.6;\r\n            ctx.drawImage(\r\n              image,\r\n              iconRadius * Math.cos(arcLength * (i + 0.5)) - iconSize / 2,\r\n              iconRadius * Math.sin(arcLength * (i + 0.5)) - iconSize / 2,\r\n              iconSize,\r\n              iconSize\r\n            );\r\n          }\r\n\r\n          ctx.globalAlpha = 1;\r\n          ctx.fillStyle = \"black\";\r\n          textOnArc(ctx, 0, 0, outerRadius, arcLength * (i - 1), labels[i]);\r\n\r\n          ctx.beginPath();\r\n          ctx.globalAlpha = lineAlpha;\r\n          ctx.strokeStyle = colours.bgLines;\r\n          ctx.moveTo(\r\n            innerRadius * Math.cos(arcLength * i),\r\n            innerRadius * Math.sin(arcLength * i)\r\n          );\r\n          ctx.lineTo(\r\n            outerRadius * Math.cos(arcLength * i),\r\n            outerRadius * Math.sin(arcLength * i)\r\n          );\r\n          ctx.stroke();\r\n        });\r\n\r\n        [innerRadius, ...radii].forEach((r) => {\r\n          ctx.beginPath();\r\n          ctx.globalAlpha = lineAlpha;\r\n          ctx.strokeStyle = colours.bgLines;\r\n          ctx.arc(0, 0, r, 0, 2 * Math.PI);\r\n          ctx.stroke();\r\n        });\r\n\r\n        ctx.globalAlpha = 1;\r\n        ctx.fillStyle = textColour;\r\n        ctx.font = \"bold 30px Lato\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"Deep\", 0, -10);\r\n        ctx.fillText(\"Learning\", 0, 25);\r\n      }\r\n    }\r\n  }, [canvasRef, scores]);\r\n  return (\r\n    <div className=\"page\">\r\n      <h1>{name}</h1>\r\n      <p className=\"comment\">{comment}</p>\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport { Chart, ChartData } from \"./Chart\";\nimport { useDropzone } from \"react-dropzone\";\nimport XLSX from \"xlsx\";\n\nconst labels = [\n  \"Character\",\n  \"Citizenship\",\n  \"Collaboration\",\n  \"Creativity\",\n  \"Critical\\xa0Thinking\",\n  \"Communication\",\n];\n\ntype DataRow = Record<typeof labels[number], number> & {\n  Name: string;\n  Comment: string;\n};\n\nfunction App() {\n  const [students, setStudents] = useState<Array<ChartData>>([]);\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        const result = e.target?.result;\n        if (result && !(typeof result == \"string\")) {\n          const rawData = new Uint8Array(result);\n          const workbook = XLSX.read(rawData, {\n            type: \"array\",\n            cellHTML: true,\n          });\n          const sheet = workbook.Sheets[workbook.SheetNames[0]];\n\n          const data = XLSX.utils.sheet_to_json<DataRow>(sheet);\n          console.log(sheet);\n          setStudents(\n            data.map((student, i) => ({\n              name: student.Name,\n              comment: student.Comment,\n              scores: labels.map((label) => student[label]),\n            }))\n          );\n        }\n      };\n      reader.readAsArrayBuffer(acceptedFiles[0]);\n    },\n    [setStudents]\n  );\n\n  const print = useCallback(() => window.print(), []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    multiple: false,\n  });\n\n  return (\n    <div>\n      {students.length > 0 ? (\n        <>\n          <button className=\"no-print\" onClick={print}>\n            Print\n          </button>\n          {students.map((props) => (\n            <Chart key={props.name} labels={labels} {...props} />\n          ))}\n          <button className=\"no-print\" onClick={print}>\n            Print\n          </button>\n          <div className=\"dropzone box no-print\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <p>Drop the file here ...</p>\n            ) : (\n              <p>\n                Drag and drop an updated spreadsheet here, or click to select\n                the file\n              </p>\n            )}\n          </div>\n        </>\n      ) : (\n        <>\n          <a href={`${process.env.PUBLIC_URL}/deep-learning-report.xlsx`}>\n            <div className=\"box\">\n              <div className=\"pull-left\">\n                <h3>Step 1</h3>\n                <p>Click here to download an empty report spreadsheet.</p>\n              </div>\n              <img\n                className=\"pull-right\"\n                src={`${process.env.PUBLIC_URL}/img/excel-logo.svg`}\n              />\n            </div>\n          </a>\n          <div className=\"box\">\n            <h3>Step 2</h3>\n            <p>\n              Fill in the data for each student, and save it to your computer\n            </p>\n            <img src={`${process.env.PUBLIC_URL}/img/example.png`} />\n          </div>\n          <div className=\"no-print dropzone box\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <p>Drop the file here...</p>\n            ) : (\n              <>\n                <div className=\"pull-left\">\n                  <h3>Step 3</h3>\n                  <p>\n                    Drag and drop your completed spreadsheet here, or click to\n                    select the file\n                  </p>\n                </div>\n                <img\n                  className=\"pull-right\"\n                  width=\"100px\"\n                  src={`${process.env.PUBLIC_URL}/img/upload.svg`}\n                />\n              </>\n            )}\n          </div>\n        </>\n      )}\n\n      <div id=\"image-reference\">\n        <img src={`${process.env.PUBLIC_URL}/img/character.svg`} />\n        <img src={`${process.env.PUBLIC_URL}/img/citizenship.svg`} />\n        <img src={`${process.env.PUBLIC_URL}/img/collaboration.svg`} />\n        <img src={`${process.env.PUBLIC_URL}/img/creativity.svg`} />\n        <img src={`${process.env.PUBLIC_URL}/img/critical-thinking.svg`} />\n        <img src={`${process.env.PUBLIC_URL}/img/communication.svg`} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}